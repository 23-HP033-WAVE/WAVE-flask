# app.py

import os
from flask import Flask, render_template, request, redirect, url_for
from flask_wtf import FlaskForm
from wtforms import StringField, FileField, TextAreaField
from wtforms.validators import DataRequired
from flask_sqlalchemy import SQLAlchemy
import boto3
from botocore.exceptions import NoCredentialsError

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key_here'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///posts.db'  # SQLite 데이터베이스 파일명 지정
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# AWS S3 설정
AWS_ACCESS_KEY = 'your_aws_access_key_here'
AWS_SECRET_KEY = 'your_aws_secret_key_here'
AWS_BUCKET_NAME = 'your_aws_bucket_name_here'
AWS_REGION = 'your_aws_region_here'

s3 = boto3.client(
    's3',
    aws_access_key_id=AWS_ACCESS_KEY,
    aws_secret_access_key=AWS_SECRET_KEY,
    region_name=AWS_REGION
)

db = SQLAlchemy(app)

class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=False)
    image_key = db.Column(db.String(100))  # AWS S3에 저장된 파일의 키 (파일명)

db.create_all()

class PostForm(FlaskForm):
    title = StringField('Title', validators=[DataRequired()])
    content = TextAreaField('Content', validators=[DataRequired()])
    image = FileField('Image')
    location = StringField('Location')

@app.route('/')
def index():
    posts = Post.query.all()
    return render_template('index.html', posts=posts)

@app.route('/create', methods=['GET', 'POST'])
def create():
    form = PostForm()
    if form.validate_on_submit():
        title = form.title.data
        content = form.content.data
        image = form.image.data
        location = form.location.data

        if image:
            image_filename = image.filename
            image_key = save_to_s3(image, AWS_BUCKET_NAME)
        else:
            image_key = None

        post = Post(title=title, content=content, image_key=image_key, location=location)
        db.session.add(post)
        db.session.commit()
        return redirect(url_for('index'))

    return render_template('create.html', form=form)

@app.route('/edit/<int:id>', methods=['GET', 'POST'])
def edit(id):
    post = Post.query.get_or_404(id)
    form = PostForm(obj=post)
    if form.validate_on_submit():
        post.title = form.title.data
        post.content = form.content.data
        image = form.image.data
        post.location = form.location.data

        if image:
            image_key = save_to_s3(image, AWS_BUCKET_NAME)
            post.image_key = image_key

        db.session.commit()
        return redirect(url_for('index'))

    return render_template('edit.html', form=form, post=post)

def save_to_s3(file, bucket_name):
    try:
        s3.upload_fileobj(
            file,
            bucket_name,
            file.filename,
            ExtraArgs={
                "ACL": "public-read",
                "ContentType": file.content_type
            }
        )
        return file.filename
    except NoCredentialsError:
        return None

if __name__ == "__main__":
    app.run(debug=True)
